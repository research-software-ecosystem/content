package: libconcurrentqueue-dev
distribution: debian
release: sid
component: main
version: 1.0.4+ds
source: concurrentqueue
homepage: https://github.com/cameron314/concurrentqueue
license: unknown
blend: debian-med
description_md5: 923d43076e8a19fd9bbe51a5cac3225d
popcon:
- insts: 5
  olde: 5
descr:
- package: libconcurrentqueue-dev
  description: industrial-strength lock-free queue for C++
  long_description: " Features\n  * Knock-your-socks-off blazing fast performance.\n\
    \  * Single-header implementation. Just drop it in your project.\n  * Fully thread-safe
    lock-free queue. Use concurrently from any number\n    of threads.\n  * C++11
    implementation -- elements are moved (instead of copied)\n    where possible.\n\
    \  * Templated, obviating the need to deal exclusively with pointers --\n    memory
    is managed for you.\n  * No artificial limitations on element types or maximum
    count.\n    Memory can be allocated once up-front, or dynamically as needed.\n\
    \  * Fully portable (no assembly; all is done through standard C++11\n    primitives).\n\
    \  * Supports super-fast bulk operations.\n  * Includes a low-overhead blocking
    version (BlockingConcurrentQueue).\n  * Exception safe.\n .\n Reasons to use\n\
    \ .\n There are not that many full-fledged lock-free queues for C++. Boost has\n\
    \ one, but it's limited to objects with trivial assignment operators and\n trivial
    destructors, for example. Intel's TBB queue isn't lock-free,\n and requires trivial
    constructors too. There're many academic papers\n that implement lock-free queues
    in C++, but usable source code is hard\n to find, and tests even more so.\n .\n\
    \ This queue not only has less limitations than others (for the most part),\n\
    \ but it's also faster. It's been fairly well-tested, and offers advanced\n features
    like bulk enqueueing/dequeueing (which, with the new design, is\n much faster
    than one element at a time, approaching and even surpassing\n the speed of a non-concurrent
    queue even under heavy contention).\n"
  release: sid
  description_md5: 923d43076e8a19fd9bbe51a5cac3225d
  license: unknown
  blend: debian-med
- package: libconcurrentqueue-dev
  description: Låsefri kø for C++ i industrikvalitet
  long_description: " Funktioner\n  * Helt vanvittig hastighed\n  * Implementering
    for enkelt-hoved. Bare smid det i dit projekt\n  * Fuld trådsikker låsefri kø.
    Brug samtidighed fra ethvert antal tråde\n  * C++11-implementering - elementer
    flyttes (i stedet for kopieres) når\n    muligt\n  * Skabelonopbygget, hvilket
    udelader behovet for at håndtere eksklusivt\n    med pegere - hukommelse håndteres
    for dig\n  * Ingen kunstige begrænsninger på elementtyper eller maksimalt antal\n\
    \    Hukommelse kan forhåndsallokeres, eller dynamisk efter behov\n  * Fuld flytbarhed
    (ingen samling; alt udføres via C++11-standarden)\n    primitives).\n  * Understøtter
    superhurtig masseoperationer\n  * Indeholder en blokeringsversion med lav belastning\n\
    \    (BlockingConcurrentQueue).\n  * Undtagelsessikker\n .\n Årsager til brug\n\
    \ .\n Der er ikke så mange låsefrie køer med alle funktioner for C++. Boost har
    en, men den er begrænset til objekter med trivielle tildelingsoperatorer og trivielle
    destruktører, for eksempel. Intels TBB-kø er ikke låsefri, og kræver også trivielle
    konstruktører. Der er mange akademiske artikler, der implementerer låsefrie køer
    i C++, men nyttig kildekode er svær at finde, og test endnu sværere.\n .\n Denne
    kø har ikke kun færre begrænsninger end andre (for hovedparten), men er også hurtigere.
    Er godt testet og tilbyder avancerede funktioner som massekø/fjernelse fra massekø
    (hvilket, med det nye design, er meget hurtigere end et element ad gangen, nærmer
    sig og overgår endda hastigheden for en ikkesamtidig kø selv under kraftig bestridelse).\n"
  release: sid
  description_md5: 923d43076e8a19fd9bbe51a5cac3225d
  license: unknown
  blend: debian-med
