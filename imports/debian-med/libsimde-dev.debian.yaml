package: libsimde-dev
distribution: debian
release: sid
component: main
version: 0.8.2
source: simde
homepage: https://github.com/simd-everywhere/simde
license: unknown
blend: debian-med
description_md5: 365b10d48a705f04d00cad192b9ea9f1
popcon:
- insts: 264
  olde: 165
  recent: 86
  vote: 13
descr:
- package: libsimde-dev
  description: Implementations of SIMD instructions for all systems
  long_description: " SIMDe provides fast, portable implementations of SIMD intrinsics
    on hardware\n which doesn't natively support them, such as calling SSE functions
    on ARM.\n There is no performance penalty if the hardware supports the native\n
    implementation (e.g., SSE/AVX runs at full speed on x86, NEON on ARM, etc.).\n
    .\n This makes porting code to other architectures much easier in a few key ways:\n
    .\n First, instead of forcing you to rewrite everything for each architecture,\n
    SIMDe lets you get a port up and running almost effortlessly. You can then\n start
    working on switching the most performance-critical sections to native\n intrinsics,
    improving performance gradually. SIMDe lets (for example) SSE/AVX\n and NEON code
    exist side-by-side, in the same implementation.\n .\n Second, SIMDe makes it easier
    to write code targeting ISA extensions you don't\n have convenient access to.
    You can run NEON code on your x86 machine without an\n emulator. Obviously you'll
    eventually want to test on the actual hardware\n you're targeting, but for most
    development, SIMDe can provide a much easier\n path.\n .\n SIMDe takes a very
    different approach from most other SIMD abstraction layers\n in that it aims to
    expose the entire functionality of the underlying\n instruction set. Instead of
    limiting functionality to the lowest common\n denominator, SIMDe tries to minimize
    the amount of effort required to port\n while still allowing you the space to
    optimize as needed.\n .\n The current focus is on writing complete portable implementations,
    though a\n large number of functions already have accelerated implementations
    using one\n (or more) of the following:\n .\n     SIMD intrinsics from other ISA
    extensions (e.g., using NEON to implement\n SSE).\n     Compiler-specific vector
    extensions and built-ins such as\n __builtin_shufflevector and __builtin_convertvector\n\
    \     Compiler auto-vectorization hints, using:\n        OpenMP 4 SIMD\n     \
    \   Cilk Plus\n        GCC loop-specific pragmas\n        clang pragma loop hint
    directives\n"
  release: sid
  description_md5: 365b10d48a705f04d00cad192b9ea9f1
  license: unknown
  blend: debian-med
