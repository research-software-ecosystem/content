{
  "@context": {
    "brick": "https://brickschema.org/schema/Brick#",
    "csvw": "http://www.w3.org/ns/csvw#",
    "dc": "http://purl.org/dc/elements/1.1/",
    "dc1": "http://dcterms/",
    "dcam": "http://purl.org/dc/dcam/",
    "dcat": "http://www.w3.org/ns/dcat#",
    "dcmitype": "http://purl.org/dc/dcmitype/",
    "dcterms": "http://purl.org/dc/terms/",
    "doap": "http://usefulinc.com/ns/doap#",
    "foaf": "http://xmlns.com/foaf/0.1/",
    "geo": "http://www.opengis.net/ont/geosparql#",
    "odrl": "http://www.w3.org/ns/odrl/2/",
    "org": "http://www.w3.org/ns/org#",
    "owl": "http://www.w3.org/2002/07/owl#",
    "prof": "http://www.w3.org/ns/dx/prof/",
    "prov": "http://www.w3.org/ns/prov#",
    "qb": "http://purl.org/linked-data/cube#",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "schema": "https://schema.org/",
    "sh": "http://www.w3.org/ns/shacl#",
    "skos": "http://www.w3.org/2004/02/skos/core#",
    "sosa": "http://www.w3.org/ns/sosa/",
    "ssn": "http://www.w3.org/ns/ssn/",
    "time": "http://www.w3.org/2006/time#",
    "vann": "http://purl.org/vocab/vann/",
    "void": "http://rdfs.org/ns/void#",
    "wgs": "https://www.w3.org/2003/01/geo/wgs84_pos#",
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  "@id": "https://dev.biii.eurobioimaging.eu/vigra",
  "@type": "http://schema.org/SoftwareApplication",
  "http://schema.org/applicationCategory": [
    {
      "@id": "http://edamontology.org/operation_Geometrical_transform"
    },
    {
      "@id": "http://edamontology.org/operation_2990"
    },
    {
      "@id": "http://edamontology.org/operation___Image_convolution"
    },
    {
      "@id": "http://edamontology.org/operation_Texture_extraction"
    },
    {
      "@id": "http://edamontology.org/operation_Morphological_operations"
    }
  ],
  "http://schema.org/dateCreated": "2013-10-11T14:51:29+00:00",
  "http://schema.org/dateModified": "2019-03-11T00:52:03+00:00",
  "http://schema.org/description": "VIGRA is a free C++ and Python library that provides fundamental image processing and analysis algorithms. Its generic architecture allows it to be used in many different application contexts and ecosystems. It is designed as an intelligent library (using the C++ template mechanism) which allows users to write code at a fairly high level of abstraction and optimizes away the abstraction overhead upon compilation. It can therefore work efficiently on very large data and forms the basis of [ilastik](https://www.ilastik.org/) and [CellCognition](https://cellcognition-project.org/). \r\n\r\n**Strengths**: open source, high quality algorithms, unlimited array dimension, arbitrary pixel types and number of channels, high speed, well tested, very flexible, easy-to-use Python bindings, support for many common file formats (including HDF5) \r\n\r\n**Limitations**: no GUI, C++ not suitable for everyone, BioFormats not supported, parallelization requires external control \r\n\r\n**Images and Multi-dimensional Arrays**: templated image data structures for arbitrary pixel types, fixed-size vectors multi-dimensional arrays for arbitrary high dimensions pre-instantiated images with many different scalar and vector valued pixel types (byte, short, int, float, double, complex, RGB, RGBA etc.) 2-dimensional image iterators, multi-dimensional iterators for arbitrary high dimensions, adapters for various image and array subsets \r\n\r\n**input/output of many image file formats**: Windows BMP, GIF, JPEG, PNG, PNM, Sun Raster, TIFF (including 32bit integer, float, and double pixel types and multi-page TIFF), Khoros VIFF, HDR (high dynamic range), Andor SIF, OpenEXR input/output of images with transparency (alpha channel) into suitable file formats. comprehensive support for HDF5 (input/output of arrays in arbitrary dimensions) \r\n\r\n**continuous reconstruction of discrete images using splines**: Just create a SplineImageView of the desired order and access interpolated values and derivative at any real-valued coordinate. \r\n\r\n**Image Processing**: STL-style image processing algorithms with functors (e.g. arithmetic and algebraic operations, gamma correction, contrast adaptation, thresholding), arbitrary regions of interest using mask images image resizing using resampling, linear interpolation, spline interpolation etc. \r\n\r\n**geometric transformations**: rotation, mirroring, arbitrary affine transformations automated functor creation using expression templates \r\n\r\n**color space conversions:** RGB, sRGB, R'G'B', XYZ, L*a*b*, L*u*v*, Y'PbPr, Y'CbCr, Y'IQ, and Y'UV real and complex Fourier transforms in arbitrary dimensions, cosine and sine transform (via fftw) noise normalization according to Förstner computation of the camera magnitude transfer function (MTF) via the slanted edge technique (ISO standard 12233) \r\n\r\n**Filters:** 2-dimensional and separable convolution, Gaussian filters and their derivatives, Laplacian of Gaussian, sharpening etc. separable convolution and FFT-based convolution for arbitrary dimensional data resampling convolution (input and output image have different size) recursive filters (1st and 2nd order), exponential filters non-linear diffusion (adaptive filters), hourglass filter total-variation filtering and denoising (standard, higer-order, and adaptive methods) \r\n\r\n**tensor image processing:** structure tensor, boundary tensor, gradient energy tensor, linear and non-linear tensor smoothing, eigenvalue calculation etc. (2D and 3D) distance transform (Manhattan, Euclidean, Checker Board norms, 2D and 3D) morphological filters and median (2D and 3D) Loy/Zelinsky symmetry transform Gabor filters \r\n\r\n**Segmentation:** edge detectors: Canny, zero crossings, Shen-Castan, boundary tensor corner detectors: corner response function, Beaudet, Rohr and Förstner corner detectors tensor based corner and junction operators \r\n\r\n**region growing:** seeded region growing, watershed algorithm \r\n\r\n**Image Analysis:** connected components labeling (2D and 3D) detection of local minima/maxima (including plateaus, 2D and 3D) tensor-basesd image analysis (2D and 3D) powerful incremental computation of region and object statistics \r\n\r\n**3-dimensional Image Processing and Analysis:** point-wise transformations, projections and expansions in arbitrary high dimensions all functors (e.g. regions statistics) readily apply to higher dimensional data as well separable convolution and FFT-based convolution filters, resizing, morphology, and Euclidean distance transform for arbitrary dimensional arrays (not just 3D) connected components labeling, seeded region growing, watershed algorithm for volume data \r\n\r\n**Machine Learning:** random forest classifier with various tree building strategies variable importance, feature selection (based on random forest) unsupervised decomposition: PCA (principle component analysis) and pLSA (probabilistic latent semantic analysis) \r\n\r\n**Mathematical Tools:** special functions (error function, splines of arbitrary order, integer square root, chi square distribution, elliptic integrals) random number generation rational and fixed point numbers quaternions polynomials and polynomial root finding matrix classes, linear algebra, solution of linear systems, eigen system computation, singular value decomposition \r\n\r\n**optimization:** linear least squares, ridge regression, L1-constrained least squares (LASSO, non-negative LASSO, least angle regression), quadratic programming \r\n\r\n**Inter-language support:** Python bindings in both directions (use Python arrays in C++, call VIGRA functions from Python) Matlab bindings of some functions",
  "http://schema.org/featureList": [
    {
      "@id": "http://edamontology.org/operation_Morphological_operations"
    },
    {
      "@id": "http://edamontology.org/operation_Texture_extraction"
    },
    {
      "@id": "http://edamontology.org/operation_Geometrical_transform"
    },
    {
      "@id": "http://edamontology.org/operation_2990"
    },
    {
      "@id": "http://edamontology.org/operation___Image_convolution"
    }
  ],
  "http://schema.org/license": "MIT",
  "http://schema.org/name": "VIGRA",
  "http://schema.org/publisher": "Ullrich Koethe and many contributors"
}