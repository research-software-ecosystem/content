{
    "additionDate": "2015-12-17T12:07:04Z",
    "biotoolsCURIE": "biotools:khmer",
    "biotoolsID": "khmer",
    "collectionID": [
        "Animal and Crop Genomics"
    ],
    "credit": [
        {
            "name": "University of California, Davis",
            "typeEntity": "Institute",
            "typeRole": [
                "Provider"
            ]
        },
        {
            "name": "Michigan State University",
            "typeEntity": "Institute",
            "typeRole": [
                "Provider"
            ]
        },
        {
            "name": "ucdavis.edu",
            "typeEntity": "Institute",
            "typeRole": [
                "Provider"
            ]
        },
        {
            "email": "khmer-project@idyll.org",
            "name": "khmer-project@idyll.org",
            "typeRole": [
                "Maintainer"
            ]
        },
        {
            "name": "Gitter Chat",
            "typeRole": [
                "Support"
            ],
            "url": "https://gitter.im/dib-lab/khmer"
        },
        {
            "name": "Getting help guide",
            "typeRole": [
                "Support"
            ],
            "url": "http://khmer.readthedocs.org/en/v2.0/user/getting-help.html"
        },
        {
            "email": "khmer-project@idyll.org",
            "name": "khmer-project@idyll.org",
            "typeEntity": "Person",
            "typeRole": [
                "Primary contact"
            ]
        },
        {
            "name": "Gitter Chat",
            "typeEntity": "Person",
            "typeRole": [
                "Primary contact"
            ],
            "url": "https://gitter.im/dib-lab/khmer"
        },
        {
            "name": "Getting help guide",
            "typeEntity": "Person",
            "typeRole": [
                "Primary contact"
            ],
            "url": "http://khmer.readthedocs.org/en/v2.0/user/getting-help.html"
        }
    ],
    "description": "khmer is a set of command-line tools for working with DNA shotgun sequencing data from genomes, transcriptomes, metagenomes, and single cells. khmer can make de novo assemblies faster, and sometimes better. khmer can also identify (and fix) problems with shotgun data.",
    "documentation": [
        {
            "type": [
                "Terms of use"
            ],
            "url": "http://khmer.readthedocs.org/en/v2.0/LICENSE.html"
        },
        {
            "type": [
                "Citation instructions"
            ],
            "url": "http://khmer.readthedocs.org/en/v2.0/citations.html"
        },
        {
            "type": [
                "General"
            ],
            "url": "http://khmer.readthedocs.org/en/v2.0/"
        }
    ],
    "download": [
        {
            "type": "Source code",
            "url": "https://github.com/dib-lab/khmer/releases"
        },
        {
            "type": "Binaries",
            "url": "https://pypi.python.org/pypi/khmer"
        }
    ],
    "editPermission": {
        "authors": [
            "diblab",
            "animalandcropgenomics"
        ],
        "type": "group"
    },
    "function": [
        {
            "input": [
                {
                    "data": {
                        "term": "DNA sequence (raw)",
                        "uri": "http://edamontology.org/data_3497"
                    },
                    "format": [
                        {
                            "term": "FASTQ-like format (text)",
                            "uri": "http://edamontology.org/format_2182"
                        },
                        {
                            "term": "FASTA",
                            "uri": "http://edamontology.org/format_1929"
                        }
                    ]
                }
            ],
            "note": "Do digital normalization (remove mostly redundant sequences).\n\nDiscard sequences based on whether or not their median k-mer abundance lies above a specified cutoff. Kept sequences will be placed in <fileN>.keep.\n\nBy default, paired end reads will be considered together; if either read should be kept, both will be kept. (This keeps both reads from a fragment, and helps with retention of repeats.) Unpaired reads are treated individually.\n\nIf -p/--paired is set, then proper pairing is required and the script will exit on unpaired reads, although --unpaired-reads can be used to supply a file of orphan reads to be read after the paired reads.\n\n--force_single will ignore all pairing information and treat reads individually. FAST[AQ] sequence",
            "operation": [
                {
                    "term": "Standardisation and normalisation",
                    "uri": "http://edamontology.org/operation_3435"
                }
            ],
            "output": [
                {
                    "data": {
                        "term": "DNA sequence (raw)",
                        "uri": "http://edamontology.org/data_3497"
                    },
                    "format": [
                        {
                            "term": "FASTQ-like format (text)",
                            "uri": "http://edamontology.org/format_2182"
                        },
                        {
                            "term": "FASTA",
                            "uri": "http://edamontology.org/format_1929"
                        }
                    ]
                }
            ]
        },
        {
            "input": [
                {
                    "data": {
                        "term": "DNA sequence (raw)",
                        "uri": "http://edamontology.org/data_3497"
                    },
                    "format": [
                        {
                            "term": "FASTQ-like format (text)",
                            "uri": "http://edamontology.org/format_2182"
                        },
                        {
                            "term": "FASTA-like",
                            "uri": "http://edamontology.org/format_2546"
                        }
                    ]
                }
            ],
            "note": "Build a k-mer countgraph from the given sequences. one or more FAST[AQ] input sequence files. k-mer countgraph (\"*.oxlicg\")",
            "operation": [
                {
                    "term": "De-novo assembly",
                    "uri": "http://edamontology.org/operation_0524"
                }
            ]
        }
    ],
    "homepage": "http://khmer.readthedocs.org/en/v2.0/",
    "language": [
        "C++",
        "Python"
    ],
    "lastUpdate": "2019-01-29T12:07:20Z",
    "license": "BSD-3-Clause",
    "link": [
        {
            "type": [
                "Repository"
            ],
            "url": "https://github.com/dib-lab/khmer"
        }
    ],
    "maturity": "Mature",
    "name": "khmer",
    "operatingSystem": [
        "Linux",
        "Mac"
    ],
    "owner": "crusoe@ucdavis.edu",
    "publication": [
        {
            "doi": "10.12688/f1000research.6924.1",
            "type": [
                "Primary"
            ]
        },
        {
            "doi": "10.1073/pnas.1121464109",
            "metadata": {
                "abstract": "Deep sequencing has enabled the investigation of a wide range of environmental microbial ecosystems, but the high memory requirements for de novo assembly of short-read shotgun sequencing data from these complex populations are an increasingly large practical barrier. Here we introduce a memory-efficient graph representation with which we can analyze the k-mer connectivity of metagenomic samples. The graph representation is based on a probabilistic data structure, a Bloom filter, that allows us to efficiently store assembly graphs in as little as 4 bits per k-mer, albeit inexactly. We show that this data structure accurately represents DNA assembly graphs in low memory.We apply this data structure to the problem of partitioning assembly graphs into components as a prelude to assembly, and show that this reduces the overall memory requirements for de novo assembly of metagenomes. On one soil metagenome assembly, this approach achieves a nearly 40-fold decrease in the maximum memory requirements for assembly. This probabilistic graph representation is a significant theoretical advance in storing assembly graphs and also yields immediate leverage on metagenomic assembly.",
                "authors": [
                    {
                        "name": "Pell J."
                    },
                    {
                        "name": "Hintze A."
                    },
                    {
                        "name": "Canino-Koning R."
                    },
                    {
                        "name": "Howe A."
                    },
                    {
                        "name": "Tiedje J.M."
                    },
                    {
                        "name": "Brown C.T."
                    }
                ],
                "citationCount": 127,
                "date": "2012-08-14T00:00:00Z",
                "journal": "Proceedings of the National Academy of Sciences of the United States of America",
                "title": "Scaling metagenome sequence assembly with probabilistic de Bruijn graphs"
            },
            "type": [
                "Other"
            ]
        },
        {
            "doi": "10.1371/journal.pone.0101271",
            "metadata": {
                "abstract": "K-mer abundance analysis is widely used for many purposes in nucleotide sequence analysis, including data preprocessing for de novo assembly, repeat detection, and sequencing coverage estimation. We present the khmer software package for fast and memory efficient online counting of k-mers in sequencing data sets. Unlike previous methods based on data structures such as hash tables, suffix arrays, and trie structures, khmer relies entirely on a simple probabilistic data structure, a Count-Min Sketch. The Count-Min Sketch permits online updating and retrieval of k-mer counts in memory which is necessary to support online k-mer analysis algorithms. On sparse data sets this data structure is considerably more memory efficient than any exact data structure. In exchange, the use of a Count-Min Sketch introduces a systematic overcount for kmers; moreover, only the counts, and not the k-mers, are stored. Here we analyze the speed, the memory usage, and the miscount rate of khmer for generating k-mer frequency distributions and retrieving k-mer counts for individual k-mers. We also compare the performance of khmer to several other k-mer counting packages, including Tallymer, Jellyfish, BFCounter, DSK, KMC, Turtle and KAnalyze. Finally, we examine the effectiveness of profiling sequencing error, k-mer abundance trimming, and digital normalization of reads in the context of high khmer false positive rates. khmer is implemented in C++ wrapped in a Python interface, offers a tested and robust API, and is freely available under the BSD license at github.com/ged-lab/khmer. \u00a9 2014 Zhang et al.",
                "authors": [
                    {
                        "name": "Zhang Q."
                    },
                    {
                        "name": "Pell J."
                    },
                    {
                        "name": "Canino-Koning R."
                    },
                    {
                        "name": "Howe A.C."
                    },
                    {
                        "name": "Brown C.T."
                    }
                ],
                "citationCount": 36,
                "date": "2014-07-25T00:00:00Z",
                "journal": "PLoS ONE",
                "title": "These are not the K-mers you are looking for: Efficient online K-mer counting using a probabilistic data structure"
            },
            "type": [
                "Other"
            ]
        },
        {
            "doi": "10.7287/peerj.preprints.890v1",
            "type": [
                "Other"
            ]
        }
    ],
    "toolType": [
        "Command-line tool"
    ],
    "topic": [
        {
            "term": "Sequence assembly",
            "uri": "http://edamontology.org/topic_0196"
        }
    ],
    "validated": 1,
    "version": [
        "2.0"
    ]
}