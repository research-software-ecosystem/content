{"collectionID": [], "accessibility": [], "topic": [{"term": "Phylogenetics", "uri": "http://edamontology.org/topic_3293"}], "owner": "ELIXIR-ITA-BICOCCA", "cost": "Free of charge", "relation": [], "download": [], "validated": 1, "publication": [{"doi": "10.1186/1471-2164-15-S6-S10", "note": null, "version": null, "pmid": null, "type": "Primary", "pmcid": null, "metadata": {"title": "Explaining evolution via constrained persistent perfect phylogeny", "abstract": "\u00a9 2014 Bonizzoni et al. Background: The perfect phylogeny is an often used model in phylogenetics since it provides an efficient basic procedure for representing the evolution of genomic binary characters in several frameworks, such as for example in haplotype inference. The model, which is conceptually the simplest, is based on the infinite sites assumption, that is no character can mutate more than once in the whole tree. A main open problem regarding the model is finding generalizations that retain the computational tractability of the original model but are more flexible in modeling biological data when the infinite site assumption is violated because of e.g. back mutations. A special case of back mutations that has been considered in the study of the evolution of protein domains (where a domain is acquired and then lost) is persistency, that is the fact that a character is allowed to return back to the ancestral state. In this model characters can be gained and lost at most once. In this paper we consider the computational problem of explaining binary data by the Persistent Perfect Phylogeny model (referred as PPP) and for this purpose we investigate the problem of reconstructing an evolution where some constraints are imposed on the paths of the tree. Results: We define a natural generalization of the PPP problem obtained by requiring that for some pairs (character, species), neither the species nor any of its ancestors can have the character. In other words, some characters cannot be persistent for some species. This new problem is called Constrained PPP (CPPP). Based on a graph formulation of the CPPP problem, we are able to provide a polynomial time solution for the CPPP problem for matrices whose conflict graph has no edges. Using this result, we develop a parameterized algorithm for solving the CPPP problem where the parameter is the number of characters. Conclusions: A preliminary experimental analysis shows that the constrained persistent perfect phylogeny model allows to explain efficiently data that do not conform with the classical perfect phylogeny model.", "citationCount": 7, "authors": [{"name": "Bonizzoni P."}, {"name": "Carrieri A.P."}, {"name": "Vedova G.D."}, {"name": "Trucco G."}], "date": "2014-01-01T00:00:00Z", "journal": "BMC Genomics"}}], "homepage_status": 0, "credit": [{"typeRole": ["Provider"], "name": "ELIXIR-ITA-BICOCCA", "url": null, "gridid": null, "note": null, "orcidid": null, "typeEntity": "Institute", "email": null}, {"typeRole": ["Primary contact"], "name": "Gianluca Della Vedova", "url": null, "gridid": null, "note": null, "orcidid": null, "typeEntity": "Person", "email": "gianluca.dellavedova@unimib.it"}, {"typeRole": ["Primary contact"], "name": "Paola Bonizzoni", "url": null, "gridid": null, "note": null, "orcidid": null, "typeEntity": "Person", "email": "bonizzoni@disco.unimib.it"}], "biotoolsCURIE": "biotools:cppp", "elixirPlatform": [], "elixirNode": [], "version": ["1"], "elixir_badge": 0, "homepage": "http://algolab.eu/research/cppp/", "function": [{"note": null, "input": [{"data": {"term": "Phylogenetic discrete data", "uri": "http://edamontology.org/data_1427"}, "format": [{"term": "Textual format", "uri": "http://edamontology.org/format_2330"}]}], "operation": [{"term": "Phylogenetic tree reconstruction", "uri": "http://edamontology.org/operation_3478"}], "cmd": null, "output": [{"data": {"term": "Phylogenetic tree", "uri": "http://edamontology.org/data_0872"}, "format": []}]}], "lastUpdate": "2018-12-10T12:58:51Z", "otherID": [], "description": "This tool computes a Persistent Phylogeny from a binary character matrix.", "toolType": ["Command-line tool"], "editPermission": {"type": "private", "authors": []}, "language": ["Ruby", "C"], "link": [], "biotoolsID": "cppp", "additionDate": "2015-07-25T15:21:56Z", "name": "Cppp", "license": "GPL-3.0", "documentation": [{"url": "https://algolab.eu/research/cppp/", "note": null, "type": "General"}], "maturity": "Emerging", "confidence_flag": null, "operatingSystem": ["Linux"]}