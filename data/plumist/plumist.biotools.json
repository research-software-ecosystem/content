{
    "additionDate": "2017-08-03T18:55:57Z",
    "biotoolsCURIE": "biotools:plumist",
    "biotoolsID": "plumist",
    "credit": [
        {
            "typeEntity": "Person",
            "typeRole": [
                "Primary contact"
            ],
            "url": "http://www.cibiv.at/contact/"
        }
    ],
    "description": "Computer program to reconstruct and evaluate majority rule supertrees: MR(-), MR(+) and MR(+)g. It searches tree space by NNI (nearest-neighbor interchange) and TDR (taxa-deletion-reinsertion). Only fully resolved input and supertrees are considered, multifurcating trees may be returned as the strict consensus of equally best scoring trees.",
    "documentation": [
        {
            "type": [
                "General"
            ],
            "url": "http://www.cibiv.at/software/plumist/plumist.pdf"
        }
    ],
    "editPermission": {
        "type": "private"
    },
    "function": [
        {
            "operation": [
                {
                    "term": "Phylogenetic tree generation",
                    "uri": "http://edamontology.org/operation_0323"
                }
            ]
        }
    ],
    "homepage": "http://www.cibiv.at/software/plumist/",
    "language": [
        "Python"
    ],
    "lastUpdate": "2018-12-10T12:58:56Z",
    "link": [
        {
            "type": [
                "Software catalogue"
            ],
            "url": "http://www.mybiosoftware.com/plumist-1-1-supertrees.html"
        }
    ],
    "name": "PluMiST",
    "operatingSystem": [
        "Linux",
        "Windows",
        "Mac"
    ],
    "owner": "mbs_import",
    "publication": [
        {
            "metadata": {
                "abstract": "Background: Supertree methods combine overlapping input trees into a larger supertree. Here, I consider split-based supertree methods that first extract the split information of the input trees and subsequently combine this split information into a phylogeny. Well known split-based supertree methods are matrix representation with parsimony and matrix representation with compatibility. Combining input trees on the same taxon set, as in the consensus setting, is a well-studied task and it is thus desirable to generalize consensus methods to supertree methods. Results: Here, three variants of majority-rule (MR) supertrees that generalize majority-rule consensus trees are investigated. I provide simple formulas for computing the respective score for bifurcating input- and supertrees. These score computations, together with a heuristic tree search minmizing the scores, were implemented in the python program PluMiST (Plus- and Minus SuperTrees) available from http://www.cibiv.at/software/ plumist. The different MR methods were tested by simulation and on real data sets. The search heuristic was successful in combining compatible input trees. When combining incompatible input trees, especially one variant, MR(-) supertrees, performed well. Conclusions: The presented framework allows for an efficient score computation of three majority-rule supertree variants and input trees. I combined the score computation with a heuristic search over the supertree space. The implementation was tested by simulation and on real data sets and showed promising results. Especially the MR(-) variant seems to be a reasonable score for supertree reconstruction. Generalizing these computations to multifurcating trees is an open problem, which may be tackled using this framework. \u00a9 2011Kupczok; licensee BioMed Central Ltd.",
                "authors": [
                    {
                        "name": "Kupczok A."
                    }
                ],
                "citationCount": 4,
                "date": "2011-07-15T00:00:00Z",
                "journal": "BMC Evolutionary Biology",
                "title": "Split-based computation of majority-rule supertrees"
            },
            "pmid": "21752249"
        }
    ],
    "toolType": [
        "Command-line tool"
    ],
    "topic": [
        {
            "term": "Phylogenetics",
            "uri": "http://edamontology.org/topic_3293"
        },
        {
            "term": "Machine learning",
            "uri": "http://edamontology.org/topic_3474"
        }
    ],
    "validated": 1
}