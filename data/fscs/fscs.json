{
    "additionDate": "2020-01-09T18:31:53Z",
    "biotoolsCURIE": "biotools:FSCs",
    "biotoolsID": "FSCs",
    "confidence_flag": "very low",
    "description": "How are functionally similar code clones syntactically different? An empirical study and a benchmark.\n\nBackground Today, redundancy in source code, so-called \u201cclones\u201d, caused by copy&paste can be found reliably using clone detection tools. Redundancy can arise also independently, however, caused not by copy&paste. At present, it is not clear how only functionally similar clones (FSC) differ from clones created by copy&paste. Our aim is to understand and categorise the syntactic differences in FSCs that distinguish them from copy&paste clones in a way that helps clone detection research. Methods. We conducted an experiment using known functionally similar programs in Java and C from coding contests. We analysed syntactic similarity with traditional detection tools and explored whether concolic clone detection can go beyond syntax.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'copy and paste', 'concolic', 'FSC', 'syntactic'",
    "editPermission": {
        "type": "public"
    },
    "homepage": "https://doi.org/10.7287/PEERJ.PREPRINTS.1516V2",
    "language": [
        "Java",
        "C"
    ],
    "lastUpdate": "2020-01-09T18:31:53Z",
    "name": "FSCs",
    "owner": "Pub2Tools",
    "publication": [
        {
            "doi": "10.7287/PEERJ.PREPRINTS.1516V2"
        }
    ],
    "topic": [
        {
            "term": "Experimental design and studies",
            "uri": "http://edamontology.org/topic_3678"
        },
        {
            "term": "Clone library",
            "uri": "http://edamontology.org/topic_3341"
        },
        {
            "term": "Software engineering",
            "uri": "http://edamontology.org/topic_3372"
        }
    ]
}