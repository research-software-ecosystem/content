{
    "additionDate": "2017-01-13T13:13:43Z",
    "biotoolsCURIE": "biotools:bfcounter",
    "biotoolsID": "bfcounter",
    "credit": [
        {
            "email": "pmelsted@gmail.com",
            "name": "Pall Melsted",
            "typeEntity": "Person",
            "typeRole": [
                "Primary contact"
            ]
        }
    ],
    "description": "BFCounter is a program for counting k-mers in DNA sequence data.",
    "documentation": [
        {
            "type": "General",
            "url": "https://github.com/pmelsted/BFCounter/blob/master/README"
        }
    ],
    "editPermission": {
        "type": "private"
    },
    "function": [
        {
            "operation": [
                {
                    "term": "k-mer counting",
                    "uri": "http://edamontology.org/operation_3472"
                }
            ]
        }
    ],
    "homepage": "https://github.com/pmelsted/BFCounter",
    "language": [
        "C++"
    ],
    "lastUpdate": "2018-12-10T12:58:53Z",
    "license": "GPL-3.0",
    "maturity": "Mature",
    "name": "BFCounter",
    "operatingSystem": [
        "Linux"
    ],
    "owner": "seqwiki_import",
    "publication": [
        {
            "metadata": {
                "abstract": "Background: Counting k-mers (substrings of length k in DNA sequence data) is an essential component of many methods in bioinformatics, including for genome and transcriptome assembly, for metagenomic sequencing, and for error correction of sequence reads. Although simple in principle, counting k-mers in large modern sequence data sets can easily overwhelm the memory capacity of standard computers. In current data sets, a large fraction-often more than 50%-of the storage capacity may be spent on storing k-mers that contain sequencing errors and which are typically observed only a single time in the data. These singleton k-mers are uninformative for many algorithms without some kind of error correction.Results: We present a new method that identifies all the k-mers that occur more than once in a DNA sequence data set. Our method does this using a Bloom filter, a probabilistic data structure that stores all the observed k-mers implicitly in memory with greatly reduced memory requirements. We then make a second sweep through the data to provide exact counts of all nonunique k-mers. For example data sets, we report up to 50% savings in memory usage compared to current software, with modest costs in computational speed. This approach may reduce memory requirements for any algorithm that starts by counting k-mers in sequence data with errors.Conclusions: A reference implementation for this methodology, BFCounter, is written in C++ and is GPL licensed. It is available for free download at http://pritch.bsd.uchicago.edu/bfcounter.html. \u00a9 2011 Melsted and Pritchard; licensee BioMed Central Ltd.",
                "authors": [
                    {
                        "name": "Melsted P."
                    },
                    {
                        "name": "Pritchard J.K."
                    }
                ],
                "citationCount": 106,
                "date": "2011-08-10T00:00:00Z",
                "journal": "BMC Bioinformatics",
                "title": "Efficient counting of k-mers in DNA sequences using a bloom filter"
            },
            "pmid": "21831268"
        }
    ],
    "toolType": [
        "Command-line tool"
    ],
    "topic": [
        {
            "term": "Sequencing",
            "uri": "http://edamontology.org/topic_3168"
        },
        {
            "term": "DNA",
            "uri": "http://edamontology.org/topic_0654"
        },
        {
            "term": "Sequence assembly",
            "uri": "http://edamontology.org/topic_0196"
        }
    ],
    "validated": 1
}