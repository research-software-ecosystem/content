{
  "@context": {
    "brick": "https://brickschema.org/schema/Brick#",
    "csvw": "http://www.w3.org/ns/csvw#",
    "dc": "http://purl.org/dc/elements/1.1/",
    "dc1": "http://dcterms/",
    "dcam": "http://purl.org/dc/dcam/",
    "dcat": "http://www.w3.org/ns/dcat#",
    "dcmitype": "http://purl.org/dc/dcmitype/",
    "dcterms": "http://purl.org/dc/terms/",
    "doap": "http://usefulinc.com/ns/doap#",
    "foaf": "http://xmlns.com/foaf/0.1/",
    "geo": "http://www.opengis.net/ont/geosparql#",
    "odrl": "http://www.w3.org/ns/odrl/2/",
    "org": "http://www.w3.org/ns/org#",
    "owl": "http://www.w3.org/2002/07/owl#",
    "prof": "http://www.w3.org/ns/dx/prof/",
    "prov": "http://www.w3.org/ns/prov#",
    "qb": "http://purl.org/linked-data/cube#",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "schema": "https://schema.org/",
    "sh": "http://www.w3.org/ns/shacl#",
    "skos": "http://www.w3.org/2004/02/skos/core#",
    "sosa": "http://www.w3.org/ns/sosa/",
    "ssn": "http://www.w3.org/ns/ssn/",
    "time": "http://www.w3.org/2006/time#",
    "vann": "http://purl.org/vocab/vann/",
    "void": "http://rdfs.org/ns/void#",
    "wgs": "https://www.w3.org/2003/01/geo/wgs84_pos#",
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  "@id": "https://dev.biii.eurobioimaging.eu/iterative-closest-point-registration",
  "@type": "http://schema.org/SoftwareApplication",
  "http://schema.org/applicationCategory": {
    "@id": "http://edamontology.org/operation__R9Vc5BV3ZMcLHEL6WEceXbY"
  },
  "http://schema.org/citation": {
    "@id": "http://www2.imm.dtu.dk/~jakw/publications/bscthesis.pdf"
  },
  "http://schema.org/dateCreated": "2016-09-15T18:45:05+00:00",
  "http://schema.org/dateModified": "2023-04-26T07:49:21+00:00",
  "http://schema.org/description": "<p>The ICP algorithm takes two point clouds as an input and return the rigid transformation (rotation matrix R and translation vector T), that best aligns the point clouds. Example: [R,T] = icp(q,p,10); Aligns the points of p to the points q with 10 iterations of the algorithm. The transformation is then applied using R*p + repmat(T,1,length(p)); The file has implemented both point to point and point to plane as well as a couple of other features such as extrapolation, weighting functions, edge point rejection, etc.</p>\r\n",
  "http://schema.org/featureList": {
    "@id": "http://edamontology.org/operation__R9Vc5BV3ZMcLHEL6WEceXbY"
  },
  "http://schema.org/name": "iterative closest point registration",
  "http://schema.org/publisher": [
    "Hans Martin Kjer",
    " Jakob Wilm"
  ]
}