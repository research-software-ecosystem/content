{"collectionID": [], "accessibility": [], "topic": [{"term": "Sequence analysis", "uri": "http://edamontology.org/topic_0080"}], "owner": "hudenise@ebi.ac.uk", "cost": "Free of charge", "relation": [], "download": [{"url": "https://sourceforge.net/projects/lmat/", "note": null, "version": null, "type": "Source code"}, {"url": "https://sourceforge.net/projects/lmat/", "note": null, "version": null, "type": "Binaries"}], "validated": 1, "publication": [{"doi": "10.1007/s10586-013-0309-0", "note": null, "version": null, "pmid": null, "type": "Primary", "pmcid": null, "metadata": {"title": "DI-MMAP\u2014a scalable memory-map runtime for out-of-core data-intensive applications", "abstract": "\u00a9 2013, The Author(s). We present DI-MMAP, a high-performance runtime that memory-maps large external data sets into an application\u2019s address space and shows significantly better performance than the Linux mmap system call. Our implementation is particularly effective when used with high performance locally attached Flash arrays on highly concurrent, latency-tolerant data-intensive HPC applications. We describe the kernel module and show performance results on a benchmark test suite, a new bioinformatics metagenomic classification application, and on a level-asynchronous Breadth-First Search (BFS) graph traversal algorithm. Using DI-MMAP, the metagenomics classification application performs up to 4\u00d7 better than standard Linux mmap. A fully external memory configuration of BFS executes up to 7.44\u00d7 faster than traditional mmap. Finally, we demonstrate that DI-MMAP shows scalable out-of-core performance for BFS traversal in main memory constrained scenarios. Such scalable memory constrained performance would allow a system with a fixed amount of memory to solve a larger problem as well as provide memory QoS guarantees for systems running multiple data-intensive applications.", "citationCount": 13, "authors": [{"name": "Van Essen B."}, {"name": "Hsieh H."}, {"name": "Ames S."}, {"name": "Pearce R."}, {"name": "Gokhale M."}], "date": "2015-01-01T00:00:00Z", "journal": "Cluster Computing"}}, {"doi": "10.1093/bioinformatics/btt389", "note": null, "version": null, "pmid": null, "type": "Other", "pmcid": null, "metadata": {"title": "Scalable metagenomic taxonomy classification using a reference genome database", "abstract": "Motivation: Deep metagenomic sequencing of biological samples has the potential to recover otherwise difficult-to-detect microorganisms and accurately characterize biological samples with limited prior knowledge of sample contents. Existing metagenomic taxonomic classification algorithms, however, do not scale well to analyze large metagenomic datasets, and balancing classification accuracy with computational efficiency presents a fundamental challenge.Results: A method is presented to shift computational costs to an off-line computation by creating a taxonomy/genome index that supports scalable metagenomic classification. Scalable performance is demonstrated on real and simulated data to show accurate classification in the presence of novel organisms on samples that include viruses, prokaryotes, fungi and protists. Taxonomic classification of the previously published 150 giga-base Tyrolean Iceman dataset was found to take <20 h on a single node 40 core large memory machine and provide new insights on the metagenomic contents of the sample. \u00a9 The Author 2013.", "citationCount": 72, "authors": [{"name": "Ames S.K."}, {"name": "Hysom D.A."}, {"name": "Gardner S.N."}, {"name": "Lloyd G.S."}, {"name": "Gokhale M.B."}, {"name": "Allen J.E."}], "date": "2013-09-15T00:00:00Z", "journal": "Bioinformatics"}}], "homepage_status": 0, "credit": [{"typeRole": ["Provider"], "name": "ebi.ac.uk", "url": null, "gridid": null, "note": null, "orcidid": null, "typeEntity": "Institute", "email": null}, {"typeRole": ["Primary contact"], "name": "Maya B Gokhale", "url": null, "gridid": null, "note": null, "orcidid": null, "typeEntity": "Person", "email": "maya@llnl.gov"}], "biotoolsCURIE": "biotools:livermore_metagenomics_analysis_toolkit", "elixirPlatform": [], "elixirNode": [], "version": ["Version 1-2-6"], "elixir_badge": 0, "homepage": "http://computation.llnl.gov/projects/livermore-metagenomics-analysis-toolkit", "function": [{"note": "Using a custom precomputed reference database with a fast searchable index to classify short reads against  genomes of viruses, bacteria, archaea, protozoa, fungi, and several variants of the human genome. Submission sequence is a fasta (or fastq) formatted sequence Outputs are 5 tab-separated summary text files, 1 log file and a number of individual output files.", "input": [{"data": {"term": "DNA sequence", "uri": "http://edamontology.org/data_3494"}, "format": [{"term": "FASTA-like", "uri": "http://edamontology.org/format_2546"}]}], "operation": [{"term": "Taxonomic classification", "uri": "http://edamontology.org/operation_3460"}], "cmd": null, "output": [{"data": {"term": "Database search results", "uri": "http://edamontology.org/data_2080"}, "format": [{"term": "Textual format", "uri": "http://edamontology.org/format_2330"}]}]}], "lastUpdate": "2018-12-10T12:58:52Z", "otherID": [], "description": "Efficiently assign taxonomic labels to as many reads as possible in very large metagenomic datasets and report the taxonomic profile of the input sample. The quick 'single pass' analysis of every read allows read binning to support additional more computationally expensive analysis such as metagenomic assembly or sensitive database searches on targeted subsets of reads. Its approach is kmer-based.", "toolType": ["Command-line tool"], "editPermission": {"type": "private", "authors": []}, "language": [], "link": [{"url": "https://sourceforge.net/projects/lmat/", "note": null, "type": "Repository"}], "biotoolsID": "livermore_metagenomics_analysis_toolkit", "additionDate": "2016-04-01T10:14:18Z", "name": "Livermore Metagenomics Analysis Toolkit", "license": null, "documentation": [{"url": "http://computation.llnl.gov/projects/livermore-metagenomics-analysis-toolkit", "note": null, "type": "General"}], "maturity": "Mature", "confidence_flag": null, "operatingSystem": ["Linux", "Mac"]}