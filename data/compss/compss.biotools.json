{
    "additionDate": "2016-10-03T14:08:36Z",
    "biotoolsCURIE": "biotools:compss",
    "biotoolsID": "compss",
    "collectionID": [
        "BioExcel"
    ],
    "cost": "Free of charge",
    "credit": [
        {
            "email": "jorge.ejarque@bsc.es",
            "name": "Jorge Ejarque - Barcelona Supercomputing Center",
            "typeEntity": "Person",
            "typeRole": [
                "Primary contact"
            ]
        },
        {
            "email": "rosa.m.badia@bsc.es",
            "name": "Rosa M. Badia  - Barcelona Supercomputing Center",
            "typeEntity": "Person",
            "typeRole": [
                "Primary contact"
            ]
        }
    ],
    "description": "Sequential programming model\nGeneral purpose programming languages + annotations/hints\nExploitation of implicit parallelism\nAutomatic on-the-fly creation of a \ntask dependency graph\nCOMPSs workflows portable to HPC and Cloud without change",
    "documentation": [
        {
            "type": [
                "General"
            ],
            "url": "https://www.bsc.es/research-and-development/software-and-apps/software-list/comp-superscalar/documentation"
        },
        {
            "type": [
                "User manual"
            ],
            "url": "http://compss.bsc.es/releases/compss/latest/docs/COMPSs_Installation_Manual.pdf"
        },
        {
            "type": [
                "Training material"
            ],
            "url": "http://compss.bsc.es/releases/tutorials/latest-tutorial.pdf"
        }
    ],
    "download": [
        {
            "note": "BioExcel_Embassy_VM",
            "type": "VM image",
            "url": "http://mmb.irbbarcelona.org/~andrio/PyMDSetup-v2.qcow2"
        },
        {
            "type": "Software package",
            "url": "https://www.bsc.es/research-and-development/software-and-apps/software-list/comp-superscalar/downloads"
        }
    ],
    "editPermission": {
        "authors": [
            "adam.hospital@irbbarcelona.org",
            "gelpi@ub.edu"
        ],
        "type": "group"
    },
    "function": [
        {
            "input": [
                {
                    "data": {
                        "term": "Workflow metadata",
                        "uri": "http://edamontology.org/data_0949"
                    }
                }
            ],
            "operation": [
                {
                    "term": "Service management",
                    "uri": "http://edamontology.org/operation_3760"
                }
            ]
        }
    ],
    "homepage": "https://www.bsc.es/research-and-development/software-and-apps/software-list/comp-superscalar",
    "language": [
        "Java",
        "Python"
    ],
    "lastUpdate": "2018-12-10T12:58:49Z",
    "license": "Apache-2.0",
    "maturity": "Mature",
    "name": "COMPSs",
    "operatingSystem": [
        "Linux"
    ],
    "owner": "jdianes",
    "publication": [
        {
            "doi": "10.1016/j.softx.2015.10.004",
            "metadata": {
                "abstract": "\u00a9 2015 The Authors.COMPSs is a programming framework that aims to facilitate the parallelization of existing applications written in Java, C/C++ and Python scripts. For that purpose, it offers a simple programming model based on sequential development in which the user is mainly responsible for (i) identifying the functions to be executed as asynchronous parallel tasks and (ii) annotating them with annotations or standard Python decorators. A runtime system is in charge of exploiting the inherent concurrency of the code, automatically detecting and enforcing the data dependencies between tasks and spawning these tasks to the available resources, which can be nodes in a cluster, clouds or grids. In cloud environments, COMPSs provides scalability and elasticity features allowing the dynamic provision of resources.",
                "authors": [
                    {
                        "name": "Badia R.M."
                    },
                    {
                        "name": "Conejero J."
                    },
                    {
                        "name": "Diaz C."
                    },
                    {
                        "name": "Ejarque J."
                    },
                    {
                        "name": "Lezzi D."
                    },
                    {
                        "name": "Lordan F."
                    },
                    {
                        "name": "Ramon-Cortes C."
                    },
                    {
                        "name": "Sirvent R."
                    }
                ],
                "citationCount": 10,
                "date": "2015-12-01T00:00:00Z",
                "journal": "SoftwareX",
                "title": "COMP Superscalar, an interoperable programming framework"
            },
            "type": [
                "Primary"
            ]
        },
        {
            "doi": "10.1007/s10723-013-9272-5",
            "metadata": {
                "abstract": "The rise of virtualized and distributed infrastructures has led to new challenges to accomplish the effective use of compute resources through the design and orchestration of distributed applications. As legacy, monolithic applications are replaced with service-oriented applications, questions arise about the steps to be taken in order to maximize the usefulness of the infrastructures and to provide users with tools for the development and execution of distributed applications. One of the issues to be solved is the existence of multiple cloud solutions that are not interoperable, which forces the user to be locked to a specific provider or to continuously adapt applications. With the objective of simplifying the programmers challenges, ServiceSs provides a straightforward programming model and an execution framework that helps on abstracting applications from the actual execution environment. This paper presents how ServiceSs transparently interoperates with multiple providers implementing the appropriate interfaces to execute scientific applications on federated clouds. \u00a9 2013 Springer Science+Business Media Dordrecht.",
                "authors": [
                    {
                        "name": "Lordan F."
                    },
                    {
                        "name": "Tejedor E."
                    },
                    {
                        "name": "Ejarque J."
                    },
                    {
                        "name": "Rafanell R."
                    },
                    {
                        "name": "Alvarez J."
                    },
                    {
                        "name": "Marozzo F."
                    },
                    {
                        "name": "Lezzi D."
                    },
                    {
                        "name": "Sirvent R."
                    },
                    {
                        "name": "Talia D."
                    },
                    {
                        "name": "Badia R.M."
                    }
                ],
                "citationCount": 35,
                "date": "2014-01-01T00:00:00Z",
                "journal": "Journal of Grid Computing",
                "title": "ServiceSs: An Interoperable Programming Framework for the Cloud"
            }
        },
        {
            "doi": "10.1177/1094342015594678",
            "metadata": {
                "abstract": "\u00a9 The Author(s) 2015.The use of the Python programming language for scientific computing has been gaining momentum in the last years. The fact that it is compact and readable and its complete set of scientific libraries are two important characteristics that favour its adoption. Nevertheless, Python still lacks a solution for easily parallelizing generic scripts on distributed infrastructures, since the current alternatives mostly require the use of APIs for message passing or are restricted to embarrassingly parallel computations. In that sense, this paper presents PyCOMPSs, a framework that facilitates the development of parallel computational workflows in Python. In this approach, the user programs her script in a sequential fashion and decorates the functions to be run as asynchronous parallel tasks. A runtime system is in charge of exploiting the inherent concurrency of the script, detecting the data dependencies between tasks and spawning them to the available resources. Furthermore, we show how this programming model can be built on top of a Big Data storage architecture, where the data stored in the backend is abstracted and accessed from the application in the form of persistent objects.",
                "authors": [
                    {
                        "name": "Tejedor E."
                    },
                    {
                        "name": "Becerra Y."
                    },
                    {
                        "name": "Alomar G."
                    },
                    {
                        "name": "Queralt A."
                    },
                    {
                        "name": "Badia R.M."
                    },
                    {
                        "name": "Torres J."
                    },
                    {
                        "name": "Cortes T."
                    },
                    {
                        "name": "Labarta J."
                    }
                ],
                "citationCount": 7,
                "date": "2017-01-01T00:00:00Z",
                "journal": "International Journal of High Performance Computing Applications",
                "title": "PyCOMPSs: Parallel computational workflows in Python"
            }
        }
    ],
    "toolType": [
        "Workbench"
    ],
    "topic": [
        {
            "term": "Software engineering",
            "uri": "http://edamontology.org/topic_3372"
        }
    ],
    "validated": 1,
    "version": [
        "2.2"
    ]
}